{"version":3,"sources":["components/album.js","components/gallery.js","components/photo.js","components/photos.js","App.js","serviceWorker.js","index.js"],"names":["Album","_this","this","react_default","a","createElement","className","onClick","props","openAlbum","children","React","Component","Gallery","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","albumId","history","push","state","data","gallery","isLoaded","bind","assertThisInitialized","_this2","fetch","then","res","json","setState","_this3","albumsNumber","keys","map","keyName","key","components_album","albums","addTagToImg","Photos","photoId","console","log","searchImgByName","event","searchInput","target","value","toLowerCase","displayImg","photoAlbumState","filter","el","title","indexOf","photoAlbum","locationPath","parseInt","location","pathname","slice","album","react_router_dom","to","type","onChange","components_photo","id","photo","src","thumbnailUrl","alt","App","basename","react_router","path","component","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8PAiBeA,0LAZF,IAAAC,EAAAC,KACL,OAEIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQC,QAAS,WAAON,EAAKO,MAAMC,cAC/CN,EAAAC,EAAAC,cAAA,gBAAQH,KAAKM,MAAME,kBANdC,IAAMC,YCgEXC,cA7DX,SAAAA,EAAYL,GAAO,IAAAP,EAAA,OAAAa,OAAAC,EAAA,EAAAD,CAAAZ,KAAAW,IACfZ,EAAAa,OAAAE,EAAA,EAAAF,CAAAZ,KAAAY,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAhB,KAAMM,KAqBVC,UAAY,SAACU,GACVlB,EAAKO,MAAMY,QAAQC,KAAK,UAAWF,EAASlB,EAAKqB,MAAMC,OApBtDtB,EAAKqB,MAAQ,CACTE,QAAS,GACTC,UAAU,GAGdxB,EAAKQ,UAAYR,EAAKQ,UAAUiB,KAAfZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAb,KARFA,mFAWC,IAAA2B,EAAA1B,KAChB2B,MAAM,+CACDC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAE,GACFJ,EAAKK,SAAS,CACVT,QAASQ,EACTP,UAAU,uCAUjB,IAAAS,EAAAhC,KACAuB,EAAYvB,KAAKoB,MAAjBG,SACED,EAAWtB,KAAKoB,MAAhBE,QACHW,EAAe,EAEnB,OAAKV,EAKGtB,EAAAC,EAAAC,cAAA,WAEYS,OAAOsB,KAAKZ,GAASa,IAAI,SAACC,EAASC,GAC/B,GAAIf,EAAQe,GAAKpB,UAAYgB,EAEzB,OADAA,IAEIhC,EAAAC,EAAAC,cAACmC,EAAD,CACIrB,QAAWK,EAAQe,GAAKpB,QACxBoB,IAAOf,EAAQe,GAAKpB,QACpBsB,OAAUjB,EACVf,UAAWyB,EAAKzB,UAAUiB,KAAK,KAAMF,EAAQe,GAAKpB,UAJtD,gBAKeK,EAAQe,GAAKpB,UAGrCjB,OAlBZC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,4BApCGK,IAAMC,WCYbZ,0LAVF,IAAAC,EAAAC,KAEL,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAASC,QAAS,WAAON,EAAKO,MAAMkC,gBAApD,KAA6ExC,KAAKM,MAAME,iBANpFC,IAAMC,oBC+FX+B,cA5FX,SAAAA,EAAYnC,GAAO,IAAAP,EAAA,OAAAa,OAAAC,EAAA,EAAAD,CAAAZ,KAAAyC,IACf1C,EAAAa,OAAAE,EAAA,EAAAF,CAAAZ,KAAAY,OAAAG,EAAA,EAAAH,CAAA6B,GAAAzB,KAAAhB,KAAMM,KAiCVkC,YAAc,SAACE,GACXC,QAAQC,IAAIF,IAnCG3C,EAsCnB8C,gBAAkB,SAACC,GAEf,IAAIC,EAAcD,EAAME,OAAOC,MAAMC,cACjCC,EAAapD,EAAKqB,MAAMgC,gBAAgBC,OAAO,SAACC,GAEhD,OAA6C,IAD3BA,EAAGC,MAAML,cACRM,QAAQT,KAG/BhD,EAAKgC,SAAS,CACV0B,WAAYN,IAEhBR,QAAQC,IAAIO,IA9CZpD,EAAKqB,MAAQ,CACTqC,WAAY,GACZL,gBAAiB,GACjB7B,UAAU,GAEdxB,EAAKyC,YAAczC,EAAKyC,YAAYhB,KAAjBZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAb,KARJA,mFAWC,IAAA2B,EAAA1B,KAEZ0D,EAAeC,SAAS3D,KAAKM,MAAMsD,SAASC,SAASC,MAAM,IAC3DC,EAAQ,GAEZpC,MAAM,8CACDC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAE,GAEFA,EAAKK,IAAI,SAACmB,EAAIjB,GACNP,EAAKO,GAAKpB,UAAYyC,IACtBK,EAAM1B,GAAOiB,KAIrB5B,EAAKK,SAAS,CACV0B,WAAYM,EACZX,gBAAiBW,EACjBxC,UAAU,uCAwBjB,IAAAS,EAAAhC,KAEL,OADiBA,KAAKoB,MAAjBG,SAMGtB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAMC,GAAG,WAAW7D,UAAU,UAA9B,2BACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,SAAO+D,KAAK,OAAO9D,UAAU,eAAe+D,SAAUnE,KAAK6C,mBAE/D5C,EAAAC,EAAAC,cAAA,WAGIS,OAAOsB,KAAKlC,KAAKoB,MAAMqC,YAAYtB,IAAI,SAACmB,EAAGjB,GACnC,OACIpC,EAAAC,EAAAC,cAACiE,EAAD,CACI/B,IAAKL,EAAKZ,MAAMqC,WAAWH,GAAIe,GAC/BC,MAAOtC,EAAKZ,MAAMqC,WAAWH,GAAIe,GACjC7B,YAAaR,EAAKQ,YAAYhB,KAAK,KAAMQ,EAAKZ,MAAMqC,WAAWH,GAAIe,KAEnEpE,EAAAC,EAAAC,cAAA,OACIoE,IAAKvC,EAAKZ,MAAMqC,WAAWH,GAAIkB,aAC/BjB,MAAOvB,EAAKZ,MAAMqC,WAAWH,GAAIC,MACjCkB,IAAKzC,EAAKZ,MAAMqC,WAAWH,GAAIC,UAGhDvD,QA1BRC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,0BA1DEK,IAAMC,mBCaZgE,mLATP,OACIzE,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAYW,SAAS,KACjB1E,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CAAOC,KAAK,WAAWC,UAAWnE,IAClCV,EAAAC,EAAAC,cAACyE,EAAA,EAAD,CAAOC,KAAK,SAASC,UAAWrC,YAN9BhC,IAAMC,WCOJqE,QACW,cAA7BC,OAAOpB,SAASqB,UAEe,UAA7BD,OAAOpB,SAASqB,UAEhBD,OAAOpB,SAASqB,SAASC,MACvB,2DCbNC,IAASC,OAAOnF,EAAAC,EAAAC,cAACkF,EAAD,MAAOC,SAASC,eAAe,SD4HzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9D,KAAK,SAAA+D,GACjCA,EAAaC","file":"static/js/main.6a703cc2.chunk.js","sourcesContent":["import React from 'react';\nimport './album.css'\n\nclass Album extends React.Component { // компонент для создание отдельного альбома\n\n    render() {\n        return (\n\n            <div className=\"album\" onClick={() => {this.props.openAlbum()}}>\n               <span> {this.props.children}</span>\n            </div>\n\n\n        );\n    }\n}\n\nexport default Album;\n","import React from 'react';\nimport Album from './album';\n\nclass Gallery extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n\n        this.state = { // задаю состояние компонента\n            gallery: [],\n            isLoaded: false,\n        };\n\n        this.openAlbum = this.openAlbum.bind(this);\n    }\n\n    componentDidMount() { // метод ЖЦ после отрисовки всех компонентов\n        fetch(\"https://jsonplaceholder.typicode.com/photos\") // метод для извлечения данных\n            .then(res => res.json())\n            .then(json => {\n                this.setState({ //метод для изменение состояния компонента\n                    gallery: json,  // записываем загруженные данные в состояние компонента\n                    isLoaded: true, // меняем значение, после того как данные подгрузились\n                })\n            })\n    }\n\n    openAlbum = (albumId) => { // функция для перехода на страницу альбома\n       this.props.history.push('/album/'+ albumId, this.state.data);\n    }\n\n\n    render() {\n        let {isLoaded} = this.state; // запись в переменную из состояним\n        const {gallery} = this.state; // запись в переменную из состояним\n        let albumsNumber = 1;        // создание переменной для первого альбома\n\n        if (!isLoaded){ // условия при котором на странице нечего не будет, пока данные не загружатся\n            return <div className='loading'> Loading gallery </div>;\n        } else {\n\n            return(\n                <div>\n                        {\n                            Object.keys(gallery).map((keyName, key) =>  { // методом .map() прохожу массим получанных данных\n                                if (gallery[key].albumId === albumsNumber){ // условия при котором создается только один альбом\n                                    albumsNumber++;\n                                    return (\n                                        <Album // создание альбома и передача компоненту параметров\n                                            albumId = {gallery[key].albumId}\n                                            key = {gallery[key].albumId}\n                                            albums = {gallery}\n                                            openAlbum={this.openAlbum.bind(null, gallery[key].albumId)}\n                                        >Album number {gallery[key].albumId}</Album>\n                                    );\n                                }\n                            }, this)\n                        }\n\n                </div>\n\n            );\n        }\n    }\n}\n\nexport default Gallery;\n","import React from 'react';\nimport './photo.css'\n\nclass Album extends React.Component { // компонент для создание отдельной фотографией и кнопкой\n\n    render() {\n\n        return (\n            <div className=\"photo\" >\n                <span className='addTag' onClick={() => {this.props.addTagToImg()}}>+</span>{this.props.children}\n            </div>\n        );\n    }\n}\n\nexport default Album;\n","import React from 'react';\nimport Photo from './photo';\nimport {Link} from \"react-router-dom\";\n\nclass Photos extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {  // задаю состояние компонента\n            photoAlbum: [],\n            photoAlbumState: [],\n            isLoaded: false,\n        };\n        this.addTagToImg = this.addTagToImg.bind(this);\n    }\n\n    componentDidMount() { // метод ЖЦ после отрисовки всех компонентов\n\n        let locationPath = parseInt(this.props.location.pathname.slice(7));\n        let album = [];\n\n        fetch(\"http://jsonplaceholder.typicode.com/photos\") // метод для извлечения данных\n            .then(res => res.json())\n            .then(json => {\n\n                json.map((el, key) => {  // методом .map() прохожу все елементы и по номеру альбома создаю отмельный масив с фотографиями данного альбома\n                    if (json[key].albumId === locationPath) {\n                        album[key] = el;\n                    }\n                });\n\n                this.setState({ //метод для изменение состояния компонента\n                    photoAlbum: album, // записываем загруженные данные в состояние компонента\n                    photoAlbumState: album, // записываем загруженные данные в состояние компонента\n                    isLoaded: true,  // меняем значение, после того как данные подгрузились\n                });\n            });\n    };\n\n    addTagToImg = (photoId) => { // функция добавления тега для фотографии\n        console.log(photoId);\n    };\n\n    searchImgByName = (event) => { // функция поиска по названию (ищется по title) фотографии\n\n        let searchInput = event.target.value.toLowerCase();\n        let displayImg = this.state.photoAlbumState.filter((el)=>{\n            let searchValue = el.title.toLowerCase();\n            return searchValue.indexOf(searchInput) !== -1;\n        });\n\n        this.setState({\n            photoAlbum: displayImg\n        });\n        console.log(displayImg);\n\n    };\n\n    render() {\n        let {isLoaded} = this.state; // запись в переменную из состояним\n        if (!isLoaded){ // условия при котором на странице нечего не будет, пока данные не загружатся\n            return <div className='loading'> Loading photos</div>;\n        } else {\n\n            return(\n                <div>\n                    <Link to='/gallery' className='return'>←Return to Gallery</Link>\n                    <div className=\"search-block\">\n                        <span>Search img by name</span>\n                        <input type='text' className='search-field' onChange={this.searchImgByName}/>\n                    </div>\n                    <div>\n                    {\n\n                        Object.keys(this.state.photoAlbum).map((el,key) => { // методом .map() прохожу все фотографии в альбоме и создаю их через компонент\n                                return (\n                                    <Photo // создание отдельной фотографии и передача компоненту параметров\n                                        key={this.state.photoAlbum[el].id}\n                                        photo={this.state.photoAlbum[el].id}\n                                        addTagToImg={this.addTagToImg.bind(null, this.state.photoAlbum[el].id)}\n                                    >\n                                        <img\n                                            src={this.state.photoAlbum[el].thumbnailUrl}\n                                            title={this.state.photoAlbum[el].title}\n                                            alt={this.state.photoAlbum[el].title}/>\n                                    </Photo>\n                                );\n                        }, this)\n                    }\n                    </div>\n                </div>\n\n            );\n        }\n    }\n}\n\nexport default Photos;\n","import React from 'react';\nimport Gallery from './components/gallery';\nimport Photos from './components/photos';\nimport { HashRouter, Route} from 'react-router-dom';\n\nclass App extends React.Component {\n\n    render(){\n        return ( // создание роутинга с переходом на другие страницы\n            <HashRouter basename='/'>            \n                <Route path='/gallery' component={Gallery} />\n                <Route path='/album' component={Photos} />\n            </HashRouter>\n        )\n   }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>,document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}